library(nycflights13)
library(tidyverse)
library(lubridate)
```


## lubridate

This lab will focus on the **lubridate** package, which makes it easier to work with dates and times in R.

```{r}
today()  # date

now()     # date-time
```

There are usually two ways you are likely to create a date/time:

- From a string:

use the lubridate function to parse your date
```{r}
ymd("2017-01-31")

mdy("January 31st, 2017")

dmy("31-Jan-2017")

#hours minute second
ymd_hms("2017-01-31 20:11:59")
```

- From individual components

use *make_date()* for dates, or *make_datetime()* for date-times:

```{r}
flights %>% 
  select(year, month, day, hour, minute) %>% 
  mutate(departure_sched = make_datetime(year, month, day, hour, minute))
```


```{r}
#create a functoin for normalizing the time
make_datetime_100 <- function(year, month, day, time) {
  # 517 %/% 100 keeps 517/100 the integer 5; 517 %% 100 keeps the 57/100 remainder 17
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

 
flights_dt <- flights %>% 
  filter(!is.na(dep_time), !is.na(arr_time)) %>% 
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
  ) %>% 
  select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
```

With this data, I can visualise the distribution of departure times across the year:

```{r}
flights_dt %>% 
  ggplot(aes(dep_time)) + 
  geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
```

Or visualise the distribution of departure times within a single day:

```{r}
flights_dt %>% 
  # choosing all the time less than 2013-01-02 00:00:00
  filter(dep_time < ymd_hms("2013-01-02 00:00:00")) %>% 
  ggplot(aes(dep_time)) + 
  geom_freqpoly(binwidth = 600) # 600 s = 10 minutes

flights_dt %>% 
  filter(sched_dep_time < ymd_hms("2013-01-02 00:00:00")) %>%  
  ggplot(aes(sched_dep_time))+
    geom_freqpoly(binwidth = 600)
```

- Date-time components:

pull out individual parts of the date with the accessor functions:

```{r}
datetime <- ymd_hms("2016-07-08 12:34:56")

year(datetime)  

month(datetime)   
# label = TRUE gives the name JUL, or otherwise 7 will be shown
month(datetime, label = TRUE)  # return the abbreviated name of the month or weekday


mday(datetime)   # day of the month

yday(datetime)   # day of the year

wday(datetime, label = TRUE, abbr = FALSE)   # day of the week

minute(datetime)
```


use *wday()* to see the distribution of flights depart everyday of a week


```{r}
flights_dt %>% 
  # do we have to mutate?? 
  mutate(wday = wday(dep_time, label = TRUE)) %>% 
  ggplot(aes(x = wday)) +
    geom_bar()
```


use *minute()* to see the distribution of flights depart by minute within the hour

```{r}
flights_dt %>% 
  mutate(minute = minute(sched_dep_time)) %>% 
 # group_by we get each minute we get how many flights leave
   group_by(minute) %>% 
  summarise(
    n = n()) %>%
ggplot(aes(minute, n)) +
  geom_line()

```

see the distribution of flights arriving delay by the scheduled departure time by minute within the hour

```{r}
flights_dt %>% 
  mutate(minute = minute(sched_dep_time)) %>% 
  group_by(minute) %>% 
  summarise(
    avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
ggplot(aes(minute, avg_delay)) +
  geom_line()
```
